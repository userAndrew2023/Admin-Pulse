import base64
import datetime
import threading
import time

from telebot.types import *

from app import bot
from models.delayed_messages import DelayedMessage
from service import chat_service, delayed_message_service
from models.chats import Chat as ChatModel


@bot.message_handler(commands=['delayed'])
def delayed(message: Message):
    chats = chat_service.find_all(message.from_user.id)
    for chat_model in chats:
        chat_model: ChatModel = chat_model
        chat = bot.get_chat(chat_model.chat_id)
        result = f"""–ö–∞–Ω–∞–ª/–≥—Ä—É–ø–ø–∞: <b>{chat.title}</b>"""
        markup = InlineKeyboardMarkup()
        markup.add(InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ", callback_data=f"add_delayed:{chat_model.id}"))
        markup.add(InlineKeyboardButton("–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å/–£–¥–∞–ª–∏—Ç—å –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è", callback_data=f"delete_delayed:{chat_model.id}"))
        bot.send_message(message.from_user.id, result, reply_markup=markup, parse_mode="HTML")
    bot.send_message(message.chat.id, "üìå –≠—Ç–æ —Ä–∞–∑–¥–µ–ª –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è. –ó–¥–µ—Å—å –≤—ã —Å–º–æ–∂–µ—Ç–µ –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç –≤ –≤–∞—à–∏ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞ —á–µ—Ä–µ–∑ –∫–∞–∫–æ–π-—Ç–æ –ø—Ä–æ–º–µ–∂—É—Ç–æ–∫ –≤—Ä–µ–º–µ–Ω–∏. ‚è∞üöÄ")


@bot.callback_query_handler(func=lambda call: "add_delayed:" in call.data)
def add_delayed(call: CallbackQuery):
    chat_id = call.data.split(":")[1]
    bot.send_message(call.from_user.id, "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è")
    bot.register_next_step_handler(call.message, text_entered, *[chat_id])


def text_entered(message: Message, chat_id):
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ 21-08-2023 12:13:19. –ï—Å–ª–∏ –≤—ã –≤–≤–µ–¥–µ—Ç–µ –≤—Ä–µ–º—è, –º–µ–Ω—å—à–µ–µ —á–µ–º —Å–µ–π—á–∞—Å. –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—Å—è –º–≥–Ω–æ–≤–µ–Ω–Ω–æ")
    bot.register_next_step_handler(message, date_entered, *[chat_id, message.text])


def date_entered(message: Message, chat_id, text):
    to_format = "%d-%m-%Y %H:%M:%S"
    try:
        timing: datetime.datetime = datetime.datetime.strptime(message.text, to_format)
        bot.send_message(message.chat.id, "–£—Å–ø–µ—à–Ω–æ")
        bot.send_message(message.chat.id, f"–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ '{text}' –æ—Ç–ø—Ä–∞–≤–∏—Ç—å—Å—è –≤ {timing}")
        delayed_message_service.add(chat_id=chat_id, text=text, date_time=timing)
        threading.Thread(target=timer(timing, chat_id)).start()
    except:
        bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞")


def timer(date_time: datetime.datetime, chat_id):
    while True:
        if datetime.datetime.now() >= date_time:
            try:
                message: DelayedMessage = delayed_message_service.find_one_chat_id(chat_id)
                chat: ChatModel = chat_service.find_one(int(chat_id))
                if message:
                    bot.send_message(chat.chat_id, message.text)
                    delayed_message_service.delete(message.id)
            except:
                pass
            break
        time.sleep(1)


@bot.callback_query_handler(func=lambda call: "delete_delayed:" in call.data)
def delete_delayed(call: CallbackQuery):
    chat_id = call.data.split(":")[1]
    for i in delayed_message_service.find_all(chat_id):
        msg: DelayedMessage = i
        res = f"""–°–æ–æ–±—â–µ–Ω–∏–µ: *{msg.text}*
–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è: *{msg.date_time}*"""
        bot.send_message(call.from_user.id, res, parse_mode="markdown", reply_markup=InlineKeyboardMarkup()
                         .add(InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_one_delayed:{msg.id}")))
    bot.answer_callback_query(call.id)


@bot.callback_query_handler(func=lambda call: "delete_one_delayed:" in call.data)
def delete_one_delayed(call: CallbackQuery):
    id_ = call.data.split(":")[1]
    delayed_message_service.delete(int(id_))
    bot.send_message(call.from_user.id, "–£—Å–ø–µ—à–Ω–æ")
    bot.answer_callback_query(call.id)
