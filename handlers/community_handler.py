from telebot.types import *
from app import bot
from models.chats import Chat as ChatModel
from service import chat_service


def community_markup(message_id):
    markup = InlineKeyboardMarkup()
    markup.add(InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å", callback_data=f"add_chat:{message_id}"))
    markup.add(InlineKeyboardButton("–ú–æ–∏ —á–∞—Ç—ã", callback_data=f"read_chats:{message_id}"))
    return markup


@bot.message_handler(commands=['vip'])
def vip(message: Message):
    bot.send_message(message.chat.id, "–ü–µ—Ä–µ–π–¥–∏—Ç–µ —Å—é–¥–∞: /community")


@bot.message_handler(commands=['community'])
def community(message: Message):
    message = bot.send_message(message.chat.id,
                               """–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–ª—è—Ç—å –∏ —É–¥–∞–ª—è—Ç—å —Å–≤–æ–∏ Telegram —á–∞—Ç—ã/–∫–∞–Ω–∞–ª—ã! üì¢. –ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ —á—Ç–æ–±—ã –≤ –≤–∞—à–µ–≥–æ –±–æ—Ç–∞ –º–æ–∂–Ω–æ –±—ã–ª–æ –∑–∞–π—Ç–∏ –∑–∞ –¥–µ–Ω—å–≥–∏, –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–°–¥–µ–ª–∞—Ç—å –ø–ª–∞—Ç–Ω—ã–º'. –ö–æ–º–∏—Å—Å–∏—è –±—É–¥–µ—Ç 4% –ø—Ä–∏ –≤—ã–≤–æ–¥–µ —Å—Ä–µ–¥—Å—Ç–≤""")
    bot.edit_message_reply_markup(chat_id=message.chat.id, message_id=message.message_id,
                                  reply_markup=community_markup(message.message_id))


@bot.callback_query_handler(func=lambda call: "delete_chat:" in call.data)
def delete_chat(call: CallbackQuery):
    chat_model: ChatModel = chat_service.find_one(int(call.data.split(":")[1]))
    bot.leave_chat(chat_model.chat_id)
    chat_service.delete(int(call.data.split(":")[1]))
    bot.send_message(call.from_user.id, "–£—Å–ø–µ—à–Ω–æ")
    bot.answer_callback_query(call.id)


@bot.callback_query_handler(func=lambda call: "read_chats:" in call.data)
def read_chats(call: CallbackQuery):
    chats = chat_service.find_all(call.from_user.id)
    for chat_model in chats:
        chat_model: ChatModel = chat_model
        chat = bot.get_chat(chat_model.chat_id)
        result = f"""–ù–∞–∑–≤–∞–Ω–∏–µ: {chat.title}
–û–ø–∏—Å–∞–Ω–∏–µ: {chat.description if chat.description is not None else '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}"""
        markup = InlineKeyboardMarkup().add(
            InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_chat:{chat_model.id}"))
        if not chat_model.is_pay:
            markup.add(InlineKeyboardButton("–°–¥–µ–ª–∞—Ç—å –ø–ª–∞—Ç–Ω—ã–º", callback_data=f"make_pay:{chat_model.id}"))
        else:
            markup.add(InlineKeyboardButton("–°–¥–µ–ª–∞—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã–º", callback_data=f"make_pay:{chat_model.id}"))
        bot.send_message(call.from_user.id, result, reply_markup=markup)
    bot.send_message(call.from_user.id, f"–£ –≤–∞—Å –¥–æ–±–∞–≤–ª–µ–Ω–æ {len(chats)} –≥—Ä—É–ø–ø")
    bot.answer_callback_query(call.id)


def generate(chat_id):
    return bot.export_chat_invite_link(chat_id=chat_id, usage_limit=1)


@bot.callback_query_handler(func=lambda call: "make_pay:" in call.data)
def make_pay(call: CallbackQuery):
    if not chat_service.find_one(int(call.data.split(":")[1])).is_pay:
        bot.send_message(call.from_user.id, "–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –≤ –¥–æ–ª–ª–∞—Ä–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä: 9.5)")
        bot.register_next_step_handler(call.message, price_entered, *[int(call.data.split(":")[1]), call.message.id])
    else:
        chat_service.reverse_pay(int(call.data.split(":")[1]))
        chat_service.cost(int(call.data.split(":")[1]), 0)
        bot.send_message(call.from_user.id, "–£—Å–ø–µ—à–Ω–æ")
        bot.answer_callback_query(call.id)


def price_entered(message: Message, chat_id, msg_id):
    try:
        cost = float(message.text)
        if cost < 5:
            bot.send_message(message.chat.id, "–°—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ–ª–∂–Ω–∞ –ø—Ä–µ–≤—ã—à–∞—Ç—å 5$")
            return
    except:
        bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞")
        return
    chat_service.cost(chat_id, cost)
    chat_service.reverse_pay(chat_id)
    bot.send_message(message.chat.id, "–£—Å–ø–µ—à–Ω–æ")
    bot.send_message(message.chat.id, "–ß—Ç–æ–±—ã –∫–ª–∏–µ–Ω—Ç –∫—É–ø–∏–ª –ø–æ–ª—É—á–∏–ª –¥–æ—Å—Ç—É–ø –∫ –∑–∞–∫—Ä—ã—Ç–æ–º—É –∫–∞–Ω–∞–ª—É, –¥–∞–π—Ç–µ –µ–º—É –≤–æ—Ç —ç—Ç—É —Å—Å—ã–ª–∫—É: \n"
                                      f"<b><code>https://t.me/pulse_of_creator_bot?start=vip_group_{chat_id}</code></b>", parse_mode="HTML")


@bot.callback_query_handler(func=lambda call: "add_chat:" in call.data)
def add_chat(call: CallbackQuery):
    bot.send_message(call.from_user.id, f"–ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –±–æ—Ç–∞ –≤ –≥—Ä—É–ø–ø—É/–∫–∞–Ω–∞–ª, —Å–¥–µ–ª–∞–π—Ç–µ –µ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º. "
                                        f"–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ —á—Ç–æ–±—ã –≤ –≤–∞—à–µ–≥–æ –±–æ—Ç–∞ –º–æ–∂–Ω–æ –±—ã–ª–æ –∑–∞–π—Ç–∏ –∑–∞ –¥–µ–Ω—å–≥–∏, –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–°–¥–µ–ª–∞—Ç—å –ø–ª–∞—Ç–Ω—ã–º'")
    bot.answer_callback_query(call.id)
